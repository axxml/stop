#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import os
import signal
import sys

from itertools import cycle
from threading import Event

try:
    import yfinance

    HAS_YFINANCE = True
except ImportError:
    HAS_YFINANCE = False


__program__ = os.path.basename(sys.argv[0])
__version__ = "0.2.2-stable"  # major.minor.revision-channel
__author__ = "Axel McLaren <scm@axml.uk>"


_DEFAULT_DELAY = 5.0  # seconds
_DEFAULT_ROUNDING = 2
_DEFAULT_COLOR = {
    'background': '#222222',
    'foreground': '#e7e7e7',
    'highlight': '#000000',
    'gain': '#55aa55',
    'loss': '#ff5555'
}
_DEFAULT_OPENER = "xdg-open"

_FORMAT_POLYBAR = "%{{A2:{} \"{}\":}}%{{B{}}}%{{F{}}}%{{u{}}}%{{+u}}%{{o{}}}%{{+o}} {} %{{-o}}%{{-u}}%{{F-}}%{{B-}}%{{B{}}} {} [%{{F{}}}{}%{{F-}}]%{{B-}}%{{A}}"
_QUOTE_URL = "https\\://finance.yahoo.com/quote/"


class ConfigError(Exception):
    """ Configuration error class """

    def __init__(self, message):
        sys.stderr.write("%s: configuration error: %s\n" % (__program__, message))

        sys.exit(2)


class Checker(object):

    def __init__(self, tickers, rounding=_DEFAULT_ROUNDING):
        self.rounded = '{{:.{:d}f}}'.format(rounding)
        self.opener = _DEFAULT_OPENER
        self.colors = None
        self.current = None
        self.tickers = None
        self.exit = None

        self.init(tickers)

        signal.signal(signal.SIGUSR1, self.cycle)
        signal.siginterrupt(signal.SIGUSR1, False)

    def init(self, tickers):
        ticker_list = list(yfinance.Tickers(tickers).tickers.values())

        for ticker in ticker_list:
            if ticker.history().empty:
                raise ConfigError("failed to load initial ticker history: {}".format(ticker.ticker))

        self.tickers = cycle(ticker_list)
        self.exit = Event()

        self.cycle()

    def decorate(self, bg, fg, hl, ga, lo):
        colors = {
            'background': bg,
            'foreground': fg,
            'highlight': hl,
            'gain': ga,
            'loss': lo
        }

        # normalize color codes
        colors.update((k, v if v[0] == '#' else '#' + v) for k, v in colors.items())

        Colors = type('Colors', (object,), colors)

        self.colors = Colors()

    def run(self, delay=_DEFAULT_DELAY):
        while True:
            self.exit.clear()

            while not self.exit.is_set():
                ticker = self.current.ticker
                data = self.current.history(period="1mo", interval="1d")

                val = data['Close'][-1]
                diff = data.diff()[-2:]['Close'][-1]

                if self.colors is None:
                    output = " {}  {} [{}]".format(ticker,
                                                   self.rounded.format(val),
                                                   self.rounded.format(diff))
                else:
                    diff_color = self.colors.gain if diff > 0 else self.colors.loss

                    output = _FORMAT_POLYBAR.format(self.opener,
                                                    _QUOTE_URL + ticker,
                                                    self.colors.highlight,
                                                    self.colors.foreground,
                                                    self.colors.background,
                                                    self.colors.background,
                                                    ticker,
                                                    self.colors.background,
                                                    self.rounded.format(val),
                                                    diff_color,
                                                    self.rounded.format(diff))

                sys.stdout.write("{}\n".format(output))
                sys.stdout.flush()

                self.exit.wait(delay)

    def cycle(self, *args):
        self.current = next(self.tickers)
        self.exit.set()


def main():
    if not HAS_YFINANCE:
        raise ConfigError("yfinance (https://github.com/ranaroussi/yfinance) is mandatory for the run")

    parser = argparse.ArgumentParser(description='Stock position tracker for status bars')

    parser.add_argument("-d", "--delay", type=float,
                        default=_DEFAULT_DELAY,
                        help="delay between checks")
    parser.add_argument("-bg", "--background", type=str,
                        default=_DEFAULT_COLOR['background'],
                        help="background color")
    parser.add_argument("-fg", "--foreground", type=str,
                        default=_DEFAULT_COLOR['foreground'],
                        help="foreground color")
    parser.add_argument("-hl", "--highlight", type=str,
                        default=_DEFAULT_COLOR['highlight'],
                        help="ticker highlight color")
    parser.add_argument("-ga", "--gain", type=str,
                        default=_DEFAULT_COLOR['gain'],
                        help="gain accent color")
    parser.add_argument("-lo", "--loss", type=str,
                        default=_DEFAULT_COLOR['loss'],
                        help="loss accent color")
    parser.add_argument("-o", "--opener", type=str,
                        default=_DEFAULT_OPENER,
                        help="quote URL opener")
    parser.add_argument("-p", "--plain", action='store_true',
                        help="disable polybar formatting")
    parser.add_argument("-r", "--rounding", type=int, choices=range(0, 14),
                        default=_DEFAULT_ROUNDING,
                        help="decimal rounding")
    parser.add_argument("-v", "--version", action='version',
                        version='%(prog)s {0} by {1}'.format(__version__, __author__))
    parser.add_argument("ticker", type=str, nargs='+',
                        help="ticker list")

    args = parser.parse_args()

    checker = Checker(args.ticker, args.rounding)

    if not args.plain:
        checker.decorate(args.background, args.foreground, args.highlight, args.gain, args.loss)
        checker.opener = args.opener

    try:
        checker.run(args.delay)
    except KeyboardInterrupt:
        sys.stderr.write("aborted by the operator\n")

        sys.exit(2)


if __name__ == "__main__":
    main()
