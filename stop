#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import os
import signal
import sys

from itertools import cycle
from threading import Event

try:
    import yfinance

    HAS_YFINANCE = True
except ImportError:
    HAS_YFINANCE = False


__program__ = os.path.basename(sys.argv[0])
__version__ = "0.2.6-dev"  # major.minor.revision-channel
__author__ = "Axel McLaren <scm@axml.uk>"


_DEFAULT_DELAY = 5.0  # seconds
_DEFAULT_ROUNDING = 2
_DEFAULT_PADDING = 4
_DEFAULT_COLOR = {
    'background': '#222222',
    'foreground': '#e7e7e7',
    'highlight': '#000000',
    'gain': '#55aa55',
    'loss': '#ff5555'
}
_DEFAULT_OPENER = "xdg-open"

_BASE_WIDTH = 24  # 7-char ticker + 6.2-digit value + 3.2-digit diff + 2 thousand separators

_FORMAT_PLAIN_VAL = " {}  {} "
_FORMAT_POLYBAR_VAL = "%{{A2:{} \"{}\":}}%{{B{}}}%{{F{}}}%{{u{}}}%{{+u}}%{{o{}}}%{{+o}} {} %{{-o}}%{{-u}}%{{F-}}%{{B-}}%{{B{}}} {} "
_ZOOM_LEVELS = (
    # day
    {
        'level': 'day',
        'history': ('5d', '1d'),
        'shift': 1,
        'format': {
            'plain': _FORMAT_PLAIN_VAL + "[{}]",
            'polybar': _FORMAT_POLYBAR_VAL + "[%{{F{}}}{}%{{F-}}]%{{B-}}%{{A}}",
        },
    },
    # week
    {
        'level': 'week',
        'history': ('1mo', '1d'),
        'shift': 7,
        'format': {
            'plain': _FORMAT_PLAIN_VAL + "{{{}}}",
            'polybar': _FORMAT_POLYBAR_VAL + "{{%{{F{}}}{}%{{F-}}}}%{{B-}}%{{A}}",
        },
    },
    # month
    {
        'level': 'month',
        'history': ('3mo', '1d'),
        'shift': 30,
        'format': {
            'plain': _FORMAT_PLAIN_VAL + "({})",
            'polybar': _FORMAT_POLYBAR_VAL + "(%{{F{}}}{}%{{F-}})%{{B-}}%{{A}}",
        },
    },
    # year
    {
        'level': 'year',
        'history': ('1y', '1d'),
        'shift': 365,
        'format': {
            'plain': _FORMAT_PLAIN_VAL + "<{}>",
            'polybar': _FORMAT_POLYBAR_VAL + "<%{{F{}}}{}%{{F-}}>%{{B-}}%{{A}}",
        },
    },
)
_QUOTE_URL = "https\\://finance.yahoo.com/quote/"


class ConfigError(Exception):
    """ Configuration error class """

    def __init__(self, message):
        sys.stderr.write("%s: configuration error: %s\n" % (__program__, message))

        sys.exit(2)


class Checker(object):

    def __init__(self, tickers, rounding=_DEFAULT_ROUNDING, padding=_DEFAULT_PADDING, thousand_separator=False, zoom_level=0):
        self.rounding = rounding
        self.padding = padding
        self.k = ',' if thousand_separator else ''
        self.opener = _DEFAULT_OPENER
        self.colors = None
        self.current = None
        self.tickers = None
        self.zoom_levels = None
        self.zoom_current = None
        self.exit = None

        self.init(tickers, zoom_level)

        signal.signal(signal.SIGUSR1, self.cycle)
        signal.siginterrupt(signal.SIGUSR1, False)
        signal.signal(signal.SIGUSR2, self.zoom)
        signal.siginterrupt(signal.SIGUSR2, False)

    @property
    def rounded(self):
        return '{{:{k}.{:d}f}}'.format(self.rounding, k=self.k)

    @property
    def rounded_diff(self):
        return '{{:+{k}.{:d}f}}'.format(self.rounding, k=self.k)

    def padded(self, s):
        padding = _BASE_WIDTH + self.padding - sum(map(len, list(map(str, s))))

        return padding if padding > 0 else 0

    def init(self, tickers, zoom_level):
        ticker_list = list(yfinance.Tickers(tickers).tickers.values())

        for ticker in ticker_list:
            if ticker.history().empty:
                raise ConfigError("failed to load initial ticker history: {}".format(ticker.ticker))

        self.tickers = cycle(ticker_list)
        self.exit = Event()

        self.zoom_levels = cycle(_ZOOM_LEVELS)

        while True:
            self.zoom()

            if self.zoom_current['level'] == zoom_level:
                break

        self.cycle()

    def decorate(self, bg, fg, hl, ga, lo):
        colors = {
            'background': bg,
            'foreground': fg,
            'highlight': hl,
            'gain': ga,
            'loss': lo
        }

        # normalize color codes
        colors.update((k, v if v[0] == '#' else '#' + v) for k, v in colors.items())

        Colors = type('Colors', (object,), colors)

        self.colors = Colors()

    def fetch(self):
        ticker = self.current.ticker
        data = self.current.history(period=self.zoom_current['history'][0],
                                    interval=self.zoom_current['history'][1])

        if data.empty is True:
            val = "ERROR"
            diff = "N/A"
        else:
            val = data['Close'].iloc[-1]
            periods = self.zoom_current['shift']

            # subtract non-trading days
            if self.zoom_current['level'] == 'year' and self.current.info['exchange'] != 'CCC':
                periods -= 115

            diff = data['Close'].diff(periods=periods).iloc[-2:].iloc[-1]

            if str(diff) == 'nan':
                diff = "N/A"

        if data.empty is True:
            rounded = val
        else:
            rounded = self.rounded.format(val)

        if data.empty is True or isinstance(diff, str):
            formatted_diff = diff
        else:
            formatted_diff = self.rounded_diff.format(diff)

        if self.colors is None:
            plain_tmpl = self.zoom_current['format']['plain']

            output = plain_tmpl.format(ticker, rounded, formatted_diff)
        else:
            if data.empty is True or isinstance(diff, str):
                diff_color = self.colors.foreground if isinstance(diff, str) else self.colors.loss
            else:
                diff_color = self.colors.gain if diff > 0 else self.colors.loss

            polybar_tmpl = self.zoom_current['format']['polybar']

            output = polybar_tmpl.format(self.opener,
                                         _QUOTE_URL + ticker,
                                         self.colors.highlight,
                                         self.colors.foreground,
                                         self.colors.background,
                                         self.colors.background,
                                         ticker,
                                         self.colors.background,
                                         rounded,
                                         diff_color,
                                         formatted_diff)

        sys.stdout.write("{}{:<{padding}}\n".format(output, "", padding=self.padded((ticker, rounded, formatted_diff[1:]))))
        sys.stdout.flush()

    def run(self, delay=_DEFAULT_DELAY):
        while True:
            self.exit.clear()

            while not self.exit.is_set():
                self.fetch()
                self.exit.wait(delay)

    def cycle(self, *args):
        self.current = next(self.tickers)
        self.exit.set()

    def zoom(self, *args):
        self.zoom_current = next(self.zoom_levels)
        self.exit.set()


def main():
    if not HAS_YFINANCE:
        raise ConfigError("yfinance (https://github.com/ranaroussi/yfinance) is mandatory for the run")

    parser = argparse.ArgumentParser(description='Stock position tracker for status bars')

    parser.add_argument("-d", "--delay", type=float,
                        default=_DEFAULT_DELAY,
                        help="delay between checks")
    parser.add_argument("-bg", "--background", type=str,
                        default=_DEFAULT_COLOR['background'],
                        help="background color")
    parser.add_argument("-fg", "--foreground", type=str,
                        default=_DEFAULT_COLOR['foreground'],
                        help="foreground color")
    parser.add_argument("-hl", "--highlight", type=str,
                        default=_DEFAULT_COLOR['highlight'],
                        help="ticker highlight color")
    parser.add_argument("-ga", "--gain", type=str,
                        default=_DEFAULT_COLOR['gain'],
                        help="gain accent color")
    parser.add_argument("-lo", "--loss", type=str,
                        default=_DEFAULT_COLOR['loss'],
                        help="loss accent color")
    parser.add_argument("-k", "--thousand-separator", action='store_true',
                        help="use thousand separator")
    parser.add_argument("-o", "--opener", type=str,
                        default=_DEFAULT_OPENER,
                        help="quote URL opener")
    parser.add_argument("-p", "--plain", action='store_true',
                        help="disable polybar formatting")
    parser.add_argument("-P", "--padding", type=int,
                        default=_DEFAULT_PADDING,
                        help="padding digit number")
    parser.add_argument("-r", "--rounding", type=int, choices=range(0, 14),
                        default=_DEFAULT_ROUNDING,
                        help="decimal rounding")
    parser.add_argument("-s", "--one-shot", action='store_true',
                        help="run once and exit (first ticker only)")
    parser.add_argument("-v", "--version", action='version',
                        version='%(prog)s {0} by {1}'.format(__version__, __author__))
    parser.add_argument("-z", "--zoom-level", type=str, choices=[l['level'] for l in _ZOOM_LEVELS],
                        default=_ZOOM_LEVELS[0]['level'],
                        help="decimal rounding")
    parser.add_argument("ticker", type=str, nargs='+',
                        help="ticker list")

    args = parser.parse_args()

    checker = Checker(args.ticker, args.rounding, args.padding, args.thousand_separator, args.zoom_level)

    if not args.plain:
        checker.decorate(args.background, args.foreground, args.highlight, args.gain, args.loss)
        checker.opener = args.opener

    if not args.one_shot:
        try:
            checker.run(args.delay)
        except KeyboardInterrupt:
            sys.stderr.write("aborted by the operator\n")

            sys.exit(2)
    else:
       checker.fetch()


if __name__ == "__main__":
    main()
